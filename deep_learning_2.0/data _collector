import cv2
import os

# Load the pre-trained Haar Cascade face detection model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Create a folder to save the detected faces if it doesn't exist
output_folder = 'images\\yash'
os.makedirs(output_folder, exist_ok=True)

# Initialize a counter for the number of images captured
image_count = 0

# Initialize the video capture device (webcam)
cap = cv2.VideoCapture(0)  # Change the argument to 1 if using an external webcam

while image_count < 20:
    # Capture frame-by-frame
    ret, frame = cap.read()

    if not ret:
        print("Error capturing frame!")
        break

    # Convert the frame to grayscale for face detection
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(frame_gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Save each detected face as a separate image
    for (x, y, w, h) in faces:
        face_roi = frame[y:y + h, x:x + w]

        # Resize the face to 300x300
        resized_face = cv2.resize(face_roi, (300, 300))

        cv2.imwrite(f'{output_folder}/face_{image_count}.jpg', resized_face)
        image_count += 1

    # Display the frame with rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

    # Display the frame
    cv2.imshow('Face Detection', frame)

    # Press 'q' to quit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture device and close the OpenCV windows
cap.release()
cv2.destroyAllWindows()

print(f"{image_count} face(s) detected and saved in '{output_folder}' folder.")